apply plugin: "jacoco"
ext {
    limits = [
            'instruction': project.getProperties().get("coverage.instruction"),
            'branch'     : project.getProperties().get("coverage.branch"),
            'line'       : project.getProperties().get("coverage.line"),
            'complexity' : project.getProperties().get("coverage.complexity"),
            'method'     : project.getProperties().get("coverage.method"),
            'class'      : project.getProperties().get("coverage.class")
    ]
}
jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/jacocoTestReports")
}
jacocoTestReport {
    reports {
        //XML required by coveralls and for the below coverage checks
        xml.enabled true
        html.enabled true
        html.destination "${jacoco.reportsDir}/html"
    }
    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")
        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)
        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }
        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]
        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < Double.parseDouble(limit)) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }
        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}
check.dependsOn jacocoTestReport